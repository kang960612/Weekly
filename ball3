int xPos = width / 2; //공의 중심에 대한 x좌표를 width(size함수로 그려준 창의 가로 길이)/2 즉, 가로의 중앙으로 하겠다
int yPos = height / 2; //공의 중심에 대한 y좌표를 height(size함수로 그려준 창의 세로 길이)/2 즉, 세로의 중앙으로 하겠다

int radius = 10; //공의 반지름을 10으로 하겠다



//공이 이동하는데 필요한 변수 선언
int xDir = -1; //공이 x축으로 움직이는데 음수방향으로 움직이겠다. 1이면 양수방향으로 움직이겠다.
int yDir = -1; //공이 y축으로 움직이는데 음수방향으로 움직이겠다. 1이면 양수방향으로 움직이겠다.
int ball_speed = 3; 공의 속도를 3으로 하겠다.



void setup(){

  size(640, 480);

}

void draw(){

  background(0);
  fill(255, 255, 0);
  ellipse(xPos, yPos, radius*2, radius*2)  
  
  
  xPos += (xDir * ball_speed); // xPos = xPos + (xDir * ball_speed), x좌표의 위치를 위에서 선언해준 방향과 속도로 움직이겠다.
  yPos += (yDir * ball_speed); // yPos = yPos + (yDir * ball_speed), y좌표의 위치를 위에서 선언해준 방향과 속도로 움직이겠다.
  
  if(xPos < radius || xPos > width-radius) xDir *= -1;
  //xPos < radius: 공이 왼쪽 벽에 부딪히면, xPos > width-radius: 공이 오른쪽 벽에 부딪히면
  //xDir *= -1  --> xDir = xDir * -1 공의 x축에 대한 방향을 반대 방향으로 바꿔주겠다.
  
  if(yPos < radius || yPos > height-radius) yDir *= -1;
  //yPos < radius: 공이 위쪽 벽에 부딪히면, yPos > height-radius: 공이 아래쪽 벽에 부딪히면
  //yDir *= -1  --> yDir = yDir * -1 공의 y축에 대한 방향을 반대 방향으로 바꿔주겠다.
}
